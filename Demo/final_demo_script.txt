# Kịch bản Demo Final: Hệ thống Quản lý Đơn hàng với Temporal
# ==========================================================

# --- Phần 0: Khởi động và Giới thiệu ---

# 1. Khởi động Temporal Cluster & Services (Chạy trong terminal riêng)
docker compose down && docker compose up -d

# 2. Mở Temporal Web UI trong trình duyệt: http://localhost:8088

# 3. Khởi động Worker (Chạy trong Terminal 1)
python worker.py

# 4. Khởi động API Server (Chạy trong Terminal 2)
# (Điều chỉnh lệnh nếu API của bạn khác)
uvicorn api.main:app --host 0.0.0.0 --port 8000

# --- Phần 1: Happy Path & Tương tác cơ bản ---

# 1. Tạo đơn hàng hợp lệ (order-happy)
curl -X POST http://localhost:8000/orders -H "Content-Type: application/json" -d '{
  "id": "order-happy",
  "customer_id": "cust-happy",
  "items": [{"product_id": "prod-abc", "quantity": 1}],
  "total_amount": 50.0
}'

# 2. Quan sát workflow 'order-happy' trên Web UI và Worker logs. Chờ đến PENDING_APPROVAL.

# 3. Truy vấn trạng thái (Sử dụng Web UI)
#    Web UI: Vào chi tiết workflow -> Queries -> get_status

# 4. Phê duyệt đơn hàng (Sử dụng Web UI hoặc API)
#    Web UI: Vào chi tiết workflow -> Signal -> Name: provide_decision, Payload: "\"approved\""
#    API (nếu có): curl -X POST http://localhost:8000/orders/order-happy/approve

# 5. Quan sát workflow 'order-happy' hoàn thành trên Web UI.

# --- Phần 2: Xử lý Lỗi ---

# A. Lỗi Validation (Non-Retryable)
# ---------------------------------
# 1. Tạo đơn hàng với số tiền âm (order-invalid)
curl -X POST "http://localhost:8000/orders" -H "Content-Type: application/json" -d '{
  "id": "order-invalid",
  "customer_id": "CUST-ERROR",
  "items": [{"product_id": "PROD-001", "quantity": 1, "price": -1299.99}],
  "total_amount": -1299.99
}'

# 2. Quan sát workflow 'order-invalid' thất bại nhanh chóng trên Web UI (trạng thái Failed).
#    Xem lịch sử để thấy lỗi ApplicationError từ validate_order.

# B. Lỗi Tạm thời & Activity Retry
# ----------------------------------
# 1. CHUẨN BỊ: Tăng tỷ lệ lỗi tạm thời
#    - Mở file: activities/order_activities.py
#    - Tìm hàm: validate_order
#    - Sửa dòng: failure_chance = 0.1  THÀNH  failure_chance = 0.8
#    - Lưu file.
#    - DỪNG Worker (Ctrl+C trong Terminal 1).
#    - KHỞI ĐỘNG LẠI Worker: python worker.py (Trong Terminal 1).

# 2. Tạo đơn hàng hợp lệ mới (order-retry)
curl -X POST http://localhost:8000/orders -H "Content-Type: application/json" -d '{
  "id": "order-retry",
  "customer_id": "cust-retry",
  "items": [{"product_id": "prod-good", "quantity": 2}],
  "total_amount": 200.0
}'

# 3. Quan sát Worker logs: Thấy lỗi tạm thời và log "Retrying activity...".
#    Quan sát Web UI: Xem chi tiết workflow 'order-retry', thấy số lần thử (Attempt) > 1 cho validate_order.

# 4. CHUẨN BỊ CHO BƯỚC TIẾP: Đặt lại tỷ lệ lỗi
#    - Mở file: activities/order_activities.py
#    - Sửa dòng: failure_chance = 0.8  TRỞ LẠI  failure_chance = 0.1
#    - Lưu file.
#    - DỪNG Worker (Ctrl+C trong Terminal 1).
#    - KHỞI ĐỘNG LẠI Worker: python worker.py (Trong Terminal 1).

# C. Worker Crash Recovery
# -------------------------
# 1. Tạo đơn hàng mới (order-crash)
curl -X POST http://localhost:8000/orders -H "Content-Type: application/json" -d '{
  "id": "order-crash",
  "customer_id": "cust-crash",
  "items": [{"product_id": "prod-durable", "quantity": 1}],
  "total_amount": 150.0
}'

# 2. Quan sát workflow 'order-crash' bắt đầu chạy trên Web UI/Worker logs.

# 3. NHANH CHÓNG DỪNG Worker (Ctrl+C trong Terminal 1).

# 4. Quan sát Web UI: Workflow 'order-crash' vẫn Running nhưng bị treo.

# 5. KHỞI ĐỘNG LẠI Worker: python worker.py (Trong Terminal 1).

# 6. Quan sát Web UI/Worker logs: Workflow 'order-crash' tự động tiếp tục từ điểm bị dừng.

# --- Phần 3: Tương tác Nâng cao ---

# D. Workflow Cancellation
# ------------------------
# 1. Tạo đơn hàng mới (order-cancel)
curl -X POST http://localhost:8000/orders -H "Content-Type: application/json" -d '{
  "id": "order-cancel",
  "customer_id": "cust-cancel",
  "items": [{"product_id": "prod-maybe", "quantity": 1}],
  "total_amount": 99.0
}'

# 2. Chờ workflow 'order-cancel' đến trạng thái PENDING_APPROVAL trên Web UI.

# 3. Yêu cầu hủy (Sử dụng Web UI)
#    Web UI: Vào chi tiết workflow -> Cancel -> Xác nhận.

# 4. Quan sát Worker logs: Thấy logic hủy chạy (nếu có).
#    Quan sát Web UI: Workflow 'order-cancel' chuyển sang trạng thái Canceled.

# E. Saga Pattern / Rollback (Inventory)
# --------------------------------------
# 1. Tạo order mới (order-saga)
curl -X POST "http://localhost:8000/orders" -H "Content-Type: application/json" -d '{
  "id": "order-saga",
  "customer_id": "CUST-ROLLBACK",
  "items": [{"product_id": "PROD-001", "quantity": 2}],
  "total_amount": 2599.98
}'

# 2. Phê duyệt order 'order-saga' (Sử dụng Web UI hoặc API như Phần 1).
#    Quan sát OrderApprovalWorkflow hoàn thành (hoặc chạy process_approved_order).

# 3. Trigger cập nhật Inventory (Kiểm tra logic API của bạn)
#    Giả sử cần gọi API riêng và lấy inventory_workflow_id (ví dụ: 'inv-saga-1'):
curl -X POST "http://localhost:8000/inventory/update" -H "Content-Type: application/json" -d '{
  "order_id": "order-saga",
  "items": [{"product_id": "PROD-001", "quantity": -2}]
}'
#    => Ghi lại inventory_workflow_id (ví dụ: 'inv-saga-1')

# 4. Quan sát InventoryWorkflow (ví dụ: 'inv-saga-1') chạy trên Web UI.

# 5. Yêu cầu rollback/hủy Inventory (Sử dụng inventory_workflow_id đã ghi lại)
curl -X POST "http://localhost:8000/inventory/inv-saga-1/cancel"

# 6. Quan sát Web UI: Xem chi tiết InventoryWorkflow ('inv-saga-1') chạy các bước compensation/rollback và kết thúc.

# --- Phần 4: Tổng kết ---
# (Không có lệnh, chỉ tóm tắt các điểm đã demo) 